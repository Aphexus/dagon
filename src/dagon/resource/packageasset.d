/*
Copyright (c) 2018 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.resource.packageasset;

import std.stdio;
import std.string;
import std.format;
import std.path;

import dlib.core.memory;
import dlib.core.stream;
import dlib.filesystem.filesystem;
import dlib.filesystem.stdfs;
import dlib.container.array;
import dlib.container.dict;
import dlib.math.vector;
import dlib.math.quaternion;
import dlib.image.color;

import dagon.core.ownership;
import dagon.core.interfaces;
import dagon.resource.asset;
import dagon.resource.boxfs;
import dagon.resource.obj;
import dagon.resource.textureasset;
import dagon.resource.entityasset;
import dagon.resource.materialasset;
import dagon.resource.scene;
import dagon.resource.props;
import dagon.graphics.mesh;
import dagon.graphics.texture;
import dagon.graphics.material;
import dagon.graphics.materials.generic;
import dagon.logics.entity;

/*
 * A simple asset package format based on Box container (https://github.com/gecko0307/box).
 * It is an archive that stores entities, meshes, materials and textures.
 * They can be accessed individually or loaded altogether.
 *
 * The module is in WIP status. What already works:
 * - Entities with transformation and mesh linking
 * - Meshes (currently only OBJ format is supported)
 * - Entity index file
 */
 
class PackageAssetOwner: Owner
{
    this(Owner o)
    {
        super(o);
    }
}

class PackageAsset: Asset
{
    Dict!(OBJAsset, string) meshes;
    Dict!(EntityAsset, string) entities;
    Dict!(TextureAsset, string) textures;
    Dict!(MaterialAsset, string) materials;
    
    string filename;
    string index;
    BoxFileSystem boxfs;
    AssetManager assetManager;
    BaseScene3D scene;
    Entity rootEntity;
    PackageAssetOwner assetOwner;

    this(BaseScene3D scene, Owner o)
    {
        super(o);
        this.scene = scene;
    }

    ~this()
    {
        release();
    }

    override bool loadThreadSafePart(string filename, InputStream istrm, ReadOnlyFileSystem fs, AssetManager mngr)
    {
        this.filename = filename;
        meshes = New!(Dict!(OBJAsset, string))();
        entities = New!(Dict!(EntityAsset, string))();
        textures = New!(Dict!(TextureAsset, string))();
        materials = New!(Dict!(MaterialAsset, string))();
        boxfs = New!BoxFileSystem(fs, filename);
        
        if (fileExists("INDEX"))
        {
            auto fstrm = boxfs.openForInput("INDEX");
            index = readText(fstrm);
            Delete(fstrm);
        }
        
        assetManager = mngr;
        
        assetOwner = New!PackageAssetOwner(null);
        rootEntity = New!Entity(scene.eventManager, assetOwner);
        
        return true;
    }

    override bool loadThreadUnsafePart()
    {
        return true;
    }
    
    bool loadAsset(Asset asset, string filename)
    {
        if (!fileExists(filename))
        {
            writefln("Error: cannot find file \"%s\" in package", filename);
            return false;
        }
        
        auto fstrm = boxfs.openForInput(filename);
        bool res = asset.loadThreadSafePart(filename, fstrm, boxfs, assetManager);
        asset.threadSafePartLoaded = res;
        Delete(fstrm);
        
        if (!res)
        {
            writefln("Error: failed to load asset \"%s\" from package", filename);
            return false;
        }
        else
        {
            res = asset.loadThreadUnsafePart();
            asset.threadUnsafePartLoaded = res;
            if (!res)
            {
                writefln("Error: failed to load asset \"%s\" from package", filename);
                return false;
            }
            else
            {
                return true;
            }
        }
    }
    
    Mesh mesh(string filename)
    {
        if (!(filename in meshes))
        {
            OBJAsset objAsset = New!OBJAsset(assetOwner);
            if (loadAsset(objAsset, filename))
            {
                meshes[filename] = objAsset;
                return objAsset.mesh;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return meshes[filename].mesh;
        }
    }
    
    Entity entity(string filename)
    {
        if (!(filename in entities))
        {
            EntityAsset entityAsset = New!EntityAsset(assetOwner);
            if (loadAsset(entityAsset, filename))
            {
                entities[filename] = entityAsset;
                
                Entity parent = rootEntity;
                if ("parent" in entityAsset.props)
                    parent = entity(entityAsset.props.parent.toString);
                
                entityAsset.entity = New!Entity(parent);
                entityAsset.entity.position = entityAsset.props.position.toVector3f;
                entityAsset.entity.rotation = Quaternionf(entityAsset.props.rotation.toVector4f).normalized;
                entityAsset.entity.scaling = entityAsset.props.scale.toVector3f;
                entityAsset.entity.updateTransformation();
                entityAsset.entity.solid = true; // TODO: read from entityAsset.props
                if ("mesh" in entityAsset.props)
                    entityAsset.entity.drawable = mesh(entityAsset.props.mesh.toString);
                if ("material" in entityAsset.props)
                    entityAsset.entity.material = material(entityAsset.props.material.toString);
                return entityAsset.entity;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return entities[filename].entity;
        }
    }
    
    Texture texture(string filename)
    {
        if (!(filename in textures))
        {
            TextureAsset texAsset = New!TextureAsset(assetManager.imageFactory, assetManager.hdrImageFactory, assetOwner);
            if (loadAsset(texAsset, filename))
            {
                textures[filename] = texAsset;
                return texAsset.texture;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return textures[filename].texture;
        }
    }
    
    Material material(string filename)
    {
        if (!(filename in materials))
        {
            MaterialAsset matAsset = New!MaterialAsset(assetOwner);
            if (loadAsset(matAsset, filename))
            {
                materials[filename] = matAsset;
                matAsset.material = createMaterial();
                if (matAsset.props.diffuse.type == DPropType.String)
                {
                    matAsset.material.diffuse = texture(matAsset.props.diffuse.toString);
                }
                else
                {
                    Vector3f diffCol = matAsset.props.diffuse.toVector3f;
                    matAsset.material.diffuse = Color4f(diffCol.r, diffCol.g, diffCol.b, 1.0f);
                }
                matAsset.material.roughness = matAsset.props.roughness.toFloat;
                matAsset.material.metallic = matAsset.props.metallic.toFloat;
                // TODO: textures
                return matAsset.material;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return materials[filename].material;
        }
    }
    
    Entity entity()
    {
        if (index.length)
        foreach(path; lineSplitter(index))
        {
            Entity e = entity(path);
        }
        
        return rootEntity;
    }
    
    GenericMaterial createMaterial()
    {
        GenericMaterial m = New!GenericMaterial(scene.defaultMaterialBackend, assetOwner);
        return m;
    }
    
    bool fileExists(string filename)
    {
        FileStat stat;
        return boxfs.stat(filename, stat);
    }

    override void release()
    {
        clearOwnedObjects();
        
        Delete(boxfs);
        
        Delete(meshes);
        Delete(entities);
        Delete(textures);
        Delete(materials);
        
        Delete(assetOwner);
        
        if (index.length)
            Delete(index);
    }
}

